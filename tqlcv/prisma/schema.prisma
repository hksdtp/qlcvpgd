generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comment_likes {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  comment_id String    @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  comments   comments  @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([comment_id, user_id])
  @@index([comment_id], map: "idx_comment_likes_comment_id")
  @@index([user_id], map: "idx_comment_likes_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comments {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id       String          @db.Uuid
  author_id     String          @db.Uuid
  content       String
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  is_edited     Boolean?        @default(false)
  likes         Int?            @default(0)
  comment_likes comment_likes[]
  users         users           @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tasks         tasks           @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([author_id], map: "idx_comments_author_id")
  @@index([created_at(sort: Desc)], map: "idx_comments_created_at")
  @@index([task_id], map: "idx_comments_task_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subtasks {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  task_id      String    @db.Uuid
  title        String    @db.VarChar(500)
  completed    Boolean?  @default(false)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  completed_at DateTime? @db.Timestamptz(6)
  tasks        tasks     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([completed], map: "idx_subtasks_completed")
  @@index([task_id], map: "idx_subtasks_task_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tasks {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String         @db.VarChar(500)
  description String?
  status      task_status    @default(ChuaLam)
  priority    task_priority? @default(TRUNG_BINH)
  department  department?
  created_by  String?        @db.Uuid
  created_at  DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?      @default(now()) @db.Timestamptz(6)
  is_read     Boolean?       @default(false)
  comments    comments[]
  subtasks    subtasks[]
  users       users?         @relation(fields: [created_by], references: [id], onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_tasks_created_at")
  @@index([created_by], map: "idx_tasks_created_by")
  @@index([department], map: "idx_tasks_department")
  @@index([is_read], map: "idx_tasks_is_read")
  @@index([priority], map: "idx_tasks_priority")
  @@index([status], map: "idx_tasks_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                  String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String          @db.VarChar(100)
  email               String?         @unique @db.VarChar(255)
  role                user_role       @default(member)
  allowed_departments department[]    @default([])
  avatar_url          String?
  created_at          DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?       @default(now()) @db.Timestamptz(6)
  last_login          DateTime?       @db.Timestamptz(6)
  is_active           Boolean?        @default(true)
  comment_likes       comment_likes[]
  comments            comments[]
  tasks               tasks[]
}

enum department {
  KinhDoanh      @map("Kinh Doanh")
  SanXuat        @map("Sản xuất/ Kỹ Thuật")
  HanhChinh      @map("Hành Chính Nhân Sự")
  Marketing      @map("Marketing")
  CVChung        @map("CV Chung")
  CVKhac         @map("CV Khác")
}

enum task_priority {
  CAO            @map("CAO")
  TRUNG_BINH     @map("TRUNG BÌNH")
  THAP           @map("THẤP")
}

enum task_status {
  ChuaLam        @map("Chưa làm")
  LenKeHoach     @map("Lên Kế Hoạch")
  CanLam         @map("Cần làm")
  DangLam        @map("Đang làm")
  HoanThanh      @map("Hoàn thành")
  TonDong        @map("Tồn đọng")
  Dung           @map("Dừng")
}

enum user_role {
  admin
  manager
  marketing_lead
  member
}
